<?php
/**
 * @file
 * Code for the Drupal profile parser feature.
 */

include_once 'profile_parser.features.inc';

define('PROFILE_PARSER_DOMAIN', 'https://amsterdam2014.drupal.org');
define('PROFILE_PARSER_START_PAGE_URL', 'https://amsterdam2014.drupal.org/attendees');
define('PROFILE_PARSER_PAGER_PARAM', 'page');
define('PROFILE_PARSER_FIRST_PAGE', 0);
define('PROFILE_PARSER_LAST_PAGE', 21);
define('PROFILE_PAGE_TIMEOUT', 1);
define('PROFILE_PARSER_CONTENT_TYPE', 'drupalcon_user');
define('PROFILE_PARSER_VIEW', 'admin/profile_parser/data');

/**
 * Implements hook_menu().
 */
function profile_parser_menu() {
  $items['admin/profile_parser'] = array(
    'title' => 'Drupal profile parser',
    'access arguments' => array('administer profile parser'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_parser_admin_form'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function profile_parser_permission() {
  return array(
    'administer profile parser' => array(
      'title' => t('Administer profile parser'),
    ),
    'view parsed drupal profiles page' => array(
      'title' => t('View parsed user profiles page'),
    ),
  );
}

/**
 * Builds admin settings form for profile parser.
 */
function profile_parser_admin_form() {
  if (user_access('view parsed drupal profiles page')) {
    $form['data'] = array(
      '#markup' => l('Drupal User Profiles', 'admin/profile_parser/data'),
    );
  }

  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile links base path'),
    '#default_value' => PROFILE_PARSER_DOMAIN,
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Page containing links to user profiles'),
    '#default_value' => PROFILE_PARSER_START_PAGE_URL,
  );

  $form['param'] = array(
    '#type' => 'textfield',
    '#title' => t('Pager parameter'),
    '#default_value' => PROFILE_PARSER_PAGER_PARAM,
  );

  $form['first_page'] = array(
    '#type' => 'textfield',
    '#title' => t('First page'),
    '#default_value' => PROFILE_PARSER_FIRST_PAGE,
    '#element_validate' => array('profile_parser_element_validate_integer_or_zero'),
  );

  $form['last_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Last page'),
    '#default_value' => PROFILE_PARSER_LAST_PAGE,
    '#element_validate' => array('profile_parser_element_validate_integer_or_zero'),
  );

  $form['timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Request timeout, sec'),
    '#default_value' => PROFILE_PAGE_TIMEOUT,
    '#element_validate' => array('profile_parser_element_validate_integer_or_zero'),
  );

  $form['parse'] = array(
    '#type' => 'submit',
    '#value' => t('Start initial parsing'),
    '#submit' => array('profile_parser_admin_form_parse'),
  );

  $form['reparse'] = array(
    '#type' => 'submit',
    '#value' => t('Start re-parsing'),
    '#submit' => array('profile_parser_admin_form_reparse'),
  );

  return $form;
}

/**
 * Validate callback for profile parser form.
 *
 * @param $form
 * @param $form_state
 */
function profile_parser_admin_form_validate($form, &$form_state) {
  if (!valid_url(trim($form_state['values']['domain']))) {
    form_set_error('domain', t('Invalid URL.'));
  }

  if (!valid_url(trim($form_state['values']['url']))) {
    form_set_error('url', t('Invalid URL.'));
  }

  if ($form_state['values']['first_page'] > $form_state['values']['last_page']) {
    form_set_error('first_page', t('The first page should be less or equal then the last page.'));
    form_set_error('last_page', t('The last page should be greater or equal then the first page.'));
  }
}

/**
 * Submit callback for profile parser form.
 *
 * @param $form
 * @param $form_state
 */
function profile_parser_admin_form_parse($form, &$form_state) {
  $batch_data = array();
  $batch_operations = array();

  $param = check_plain(trim($form_state['values']['param']));
  $domain = trim($form_state['values']['domain']);
  $init_url = trim($form_state['values']['url']);
  $first_page = (int) $form_state['values']['first_page'];
  $last_page = (int) $form_state['values']['last_page'];
  $timeout = (int) $form_state['values']['timeout'];

  for ($i = $first_page; $i < ($last_page + 1); $i++) {
    $batch_data[$i] = array(
      'domain' => $domain,
      'url' => url($init_url, array('query' => array($param => $i))),
      'timeout' => $timeout,
    );
  }

  foreach ($batch_data as $page) {
    $batch_operations[] = array(
      'profile_parser_parse_page',
      array(
        $page,
        t('Processing !page', array('!page' => $page['url'])),
      ),
    );
  }

  $batch = array(
    'title' => t('Profile Parser'),
    'operations' => $batch_operations,
    'finished' => 'profile_parser_batch_finished',
    'init_message' => t('Collecting user profiles...'),
    'progress_message' => t('Processed @current page out of @total pages.'),
    'error_message' => t('Batch has encountered an error.'),
    'file' => drupal_get_path('module', 'profile_parser') . '/profile_parser.batch.inc',
  );

  batch_set($batch);
  batch_process();
}

/**
 * Reparse user profile data parsing only new profiles.
 */
function profile_parser_admin_form_reparse($form, &$form_state) {
  $batch_data = array();
  $batch_operations = array();

  $param = check_plain(trim($form_state['values']['param']));
  $domain = trim($form_state['values']['domain']);
  $init_url = trim($form_state['values']['url']);
  $first_page = (int) $form_state['values']['first_page'];
  $last_page = (int) $form_state['values']['last_page'];
  $timeout = (int) $form_state['values']['timeout'];

  for ($i = $first_page; $i < ($last_page + 1); $i++) {
    $batch_data[$i] = array(
      'domain' => $domain,
      'url' => url($init_url, array('query' => array($param => $i))),
      'timeout' => $timeout,
    );
  }

  foreach ($batch_data as $page) {
    $batch_operations[] = array(
      'profile_parser_reparse_page',
      array(
        $page,
        t('Re-parsing !page', array('!page' => $page['url'])),
      ),
    );
  }

  $batch = array(
    'title' => t('Profile Re-parser'),
    'operations' => $batch_operations,
    'finished' => 'profile_parser_batch_finished',
    'init_message' => t('Collecting user profiles...'),
    'progress_message' => t('Processed @current page out of @total pages.'),
    'error_message' => t('Batch has encountered an error.'),
    'file' => drupal_get_path('module', 'profile_parser') . '/profile_parser.batch.inc',
  );

  batch_set($batch);
  batch_process();
}

/**
 * Parses user profile page.
 *
 * @param $url
 *
 * @return array
 */
function profile_parser_get_profile_data($url) {
  $profile = array();

  $html = drupal_http_request($url);

  // XPath patterns.
  $xpath_pattern_title = ".//*/div[@class='l-content']/h1";
  $xpath_pattern_first_name = ".//*/div[contains(concat(' ',normalize-space(@class),' '),' field--name-field-profile-first ')]/div[@class='field__items']/div";
  $xpath_pattern_last_name = ".//*/div[contains(concat(' ',normalize-space(@class),' '),' field--name-field-profile-last ')]/div[@class='field__items']/div";
  $xpath_pattern_organization = ".//*/div[contains(concat(' ',normalize-space(@class),' '),' field--name-field-profile-org ')]/div[@class='field__items']/div";
  $xpath_pattern_job_title = ".//*/div[contains(concat(' ',normalize-space(@class),' '),' field--name-field-profile-job-title ')]/div[@class='field__items']/div";
  $xpath_pattern_interests = ".//*/div[contains(concat(' ',normalize-space(@class),' '),' field--name-field-profile-interests ')]/div[@class='field__items']/div";

  if (isset($html->data)) {
    libxml_use_internal_errors(true);

    $dom = new DOMDocument();
    $dom->recover = true;
    $dom->strictErrorChecking = false;
    $dom->loadHTML($html->data);

    $xpath = new DOMXpath($dom);

    $profile['url'] = $url;
    $profile['title'] = profile_parser_parse_field($xpath, $xpath_pattern_title);
    $profile['first_name'] = profile_parser_parse_field($xpath, $xpath_pattern_first_name);
    $profile['last_name'] = profile_parser_parse_field($xpath, $xpath_pattern_last_name);
    $profile['organization'] = profile_parser_parse_field($xpath, $xpath_pattern_organization);
    $profile['job_title'] = profile_parser_parse_field($xpath, $xpath_pattern_job_title);
    $profile['interests'] = profile_parser_parse_field($xpath, $xpath_pattern_interests);
  }

  return isset($profile['title']) ? $profile : array();
}

/**
 * Returns user profile urls parsed from the specified url.
 *
 * URL example: https://amsterdam2014.drupal.org/users/{USERNAME}.
 *
 * @param $url
 *
 * @return array
 */
function profile_parser_get_user_urls($domain, $url) {
  $urls = array();
  $xpath_pattern_userlink = ".//*/a[@class='username']";
  $html = drupal_http_request($url);

  if (isset($html->data)) {
    libxml_use_internal_errors(true);

    $dom = new DOMDocument();
    $dom->recover = true;
    $dom->strictErrorChecking = false;
    $dom->loadHTML($html->data);

    $xpath = new DOMXpath($dom);

    $links = $xpath->query($xpath_pattern_userlink);

    foreach ($links as $link) {
      $url = $link->getAttribute('href');
      if (substr_count($url, '/users/')) {
        $urls[] = $domain . $url;
      }
    }
  }

  return $urls;
}

/**
 * Parses single field that matches specified xpath pattern.
 *
 * @param $xpath
 * @param $xpath_pattern
 *
 * @return string
 */
function profile_parser_parse_field($xpath, $xpath_pattern) {
  $field = $xpath->query($xpath_pattern);
  $field_processed = '';

  foreach ($field as $item) {
    $field_processed = $item->nodeValue;
  }

  return $field_processed;
}

/**
 * Validates positive integer or zero.
 *
 * @param $element
 * @param $form_state
 */
function profile_parser_element_validate_integer_or_zero($element, &$form_state) {
  preg_match('/^[0-9]\d*$/', trim($element['#value']), $matches);
  if (empty($matches)) {
    form_error($element, t('%name must be a positive integer or 0.', array('%name' => $element['#title'])));
  }
}

/**
 * Checks if profile already exists in the database.
 *
 * @param $profile_url
 *
 * @return bool
 */
function profile_parser_profile_exists($profile_url) {
  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_profile_url', 'fu', 'fu.entity_id = n.nid');
  $query
    ->fields('n', array('nid'))
    ->condition('n.type', PROFILE_PARSER_CONTENT_TYPE, '=')
    ->condition('fu.field_profile_url_url', $profile_url, '=');
  $result = $query->execute()->rowCount();

  return $result > 0 ? TRUE : FALSE;
}
